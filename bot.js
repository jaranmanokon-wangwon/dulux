const { 
    Client, 
    GatewayIntentBits,
    ActivityType,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    Events,
    EmbedBuilder,
    InteractionResponseType,
    PermissionsBitField
} = require('discord.js');

require('dotenv').config();
const fs = require('fs').promises;
const path = require('path');

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

const MEMORY_FILE = path.join(__dirname, 'memory-logs-verify.txt');
const WHITELIST_FILE = path.join(__dirname, '..', 'DLX_SERVER', 'Whitelist.json');
const VERIFY_ROLE_ID = '1255222180548182030'; // Role ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Event name
client.once(Events.ClientReady, async () => {
    console.log(`${client.user.tag} is online!`);

    client.user.setActivity("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏°!", {
        type: ActivityType.Streaming,
        url: "https://www.twitch.tv/lofigirl"
    });

    // ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° + ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á
    const channelId = '1419937082297679954';

    try {
        const channel = await client.channels.fetch(channelId);

        if (!channel) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ');
            return;
        }

        const button = new ButtonBuilder()
            .setCustomId('open_modal')
            .setLabel('VERIFY')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(button);

        const embed = new EmbedBuilder()
            .setTitle('DULUX BOXING VERIFYING')
            .setDescription('‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏°')
            .setImage('https://i.ibb.co/Z1YcdmxM/DULUX.png')
            .setColor('#0099ff'); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ

        await channel.send({ embeds: [embed], components: [row] });
        console.log('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß');

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', error);
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå memory logs
async function loadMemoryLogs() {
    try {
        const data = await fs.readFile(MEMORY_FILE, 'utf-8');
        return data;
    } catch (err) {
        if (err.code === 'ENOENT') {
            console.log("‚ö† ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå memory logs");
            return '';
        } else {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î memory logs:", err);
            return '';
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Whitelist.json - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ JSON error
async function loadWhitelist() {
    try {
        const data = await fs.readFile(WHITELIST_FILE, 'utf-8');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!data.trim()) {
            console.log("‚ö† ‡πÑ‡∏ü‡∏•‡πå Whitelist.json ‡∏ß‡πà‡∏≤‡∏á - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà");
            await saveWhitelist([]);
            return [];
        }

        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse JSON
        try {
            const parsed = JSON.parse(data);
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (Array.isArray(parsed)) {
                return parsed;
            } else {
                console.log("‚ö† Whitelist.json ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà array - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà");
                await saveWhitelist([]);
                return [];
            }
        } catch (parseError) {
            console.error("‚ùå JSON parse error:", parseError.message);
            console.log("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...");

            // ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
            const backupFile = WHITELIST_FILE + `.backup.${Date.now()}`;
            await fs.writeFile(backupFile, data, 'utf-8');
            console.log(`üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: ${backupFile}`);

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
            await saveWhitelist([]);
            return [];
        }

    } catch (err) {
        if (err.code === 'ENOENT') {
            console.log("‚ö† ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Whitelist.json - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà");
            await saveWhitelist([]);
            return [];
        } else {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Whitelist.json:", err);
            return [];
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå Whitelist.json - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
async function saveWhitelist(list) {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ list ‡πÄ‡∏õ‡πá‡∏ô array
        if (!Array.isArray(list)) {
            console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• whitelist ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array");
            throw new Error("Whitelist data must be an array");
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        const dir = path.dirname(WHITELIST_FILE);
        await fs.mkdir(dir, { recursive: true });

        // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JSON
        const jsonString = JSON.stringify(list, null, 2);
        await fs.writeFile(WHITELIST_FILE, jsonString, 'utf-8');

        console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Whitelist.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${list.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
    } catch (err) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Whitelist.json:", err);
        throw err;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
async function isUserAlreadyVerified(userId) {
    try {
        const whitelist = await loadWhitelist();
        return whitelist.some(user => user.discordId === userId);
    } catch (err) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:", err);
        return false; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions ‡∏Ç‡∏≠‡∏á bot
function checkBotPermissions(guild, botMember) {
    const permissions = {
        manageNicknames: botMember.permissions.has(PermissionsBitField.Flags.ManageNicknames),
        manageRoles: botMember.permissions.has(PermissionsBitField.Flags.ManageRoles)
    };

    console.log(`üîç Bot Permissions Check:
        - Manage Nicknames: ${permissions.manageNicknames ? '‚úÖ' : '‚ùå'}
        - Manage Roles: ${permissions.manageRoles ? '‚úÖ' : '‚ùå'}`);

    return permissions;
}

client.on(Events.InteractionCreate, async interaction => {
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏° Verify
    if (interaction.isButton() && interaction.customId === 'open_modal') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isVerified = await isUserAlreadyVerified(interaction.user.id);

        if (isVerified) {
            await interaction.reply({
                content: "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                flags: 64 // InteractionResponseFlags.Ephemeral
            });
            return;
        }

        const modal = new ModalBuilder()
            .setCustomId('secret_modal')
            .setTitle('DULUX BOXING VERIFYING');

        const usernameInput = new TextInputBuilder()
            .setCustomId('username')
            .setLabel('USERNAME ROBLOX')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('‡∏Å‡∏£‡∏≠‡∏Å USERNAME ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (REWARZ_TH)')
            .setRequired(true)
            .setMaxLength(50);

        const secretInput = new TextInputBuilder()
            .setCustomId('secret')
            .setLabel('‡∏Å‡∏£‡∏≠‡∏Å VERIFY CODE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('‡∏Å‡∏£‡∏≠‡∏Å VERIFY CODE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (FJSDIOEHWKJSF)')
            .setRequired(true)
            .setMaxLength(100);

        modal.addComponents(
            new ActionRowBuilder().addComponents(usernameInput),
            new ActionRowBuilder().addComponents(secretInput)
        );

        await interaction.showModal(modal);
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Modal Submit
    if (interaction.isModalSubmit() && interaction.customId === 'secret_modal') {
        const username = interaction.fields.getTextInputValue('username').trim();
        const secret = interaction.fields.getTextInputValue('secret').trim();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if (!username || !secret) {
            await interaction.reply({
                content: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
                flags: 64 // InteractionResponseFlags.Ephemeral
            });
            return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isVerified = await isUserAlreadyVerified(interaction.user.id);

        if (isVerified) {
            await interaction.reply({
                content: "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ",
                flags: 64 // InteractionResponseFlags.Ephemeral
            });
            return;
        }

        try {
            console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: Username=${username}, Secret=${secret}`);

            // ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå memory logs
            const data = await loadMemoryLogs();

            if (!data) {
                await interaction.reply({
                    content: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                    flags: 64 // InteractionResponseFlags.Ephemeral
                });
                return;
            }

            // ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
            const lines = data.split('\n').filter(line => line.trim() !== '');
            console.log(`üìä ‡∏û‡∏ö ${lines.length} ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå memory logs`);

            // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            console.log(`üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å:`, lines.slice(0, 3));

            const lineMatch = lines.find(line => {
                const usernameMatch = line.includes(`Username: ${username}`);
                const secretMatch = line.includes(`Secret: ${secret}`);
                console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î: ${line.substring(0, 100)}... | Username: ${usernameMatch} | Secret: ${secretMatch}`);
                return usernameMatch && secretMatch;
            });

            if (lineMatch) {
                console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:', lineMatch);

                // ‡πÇ‡∏´‡∏•‡∏î whitelist ‡πÄ‡∏î‡∏¥‡∏°
                const whitelist = await loadWhitelist();

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Roblox username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const robloxExists = whitelist.some(user => 
                    user.robloxName && user.robloxName.toLowerCase() === username.toLowerCase()
                );

                if (robloxExists) {
                    await interaction.reply({
                        content: "‚ùå Roblox Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Username ‡∏≠‡∏∑‡πà‡∏ô",
                        flags: 64 // InteractionResponseFlags.Ephemeral
                    });
                    return;
                }

                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                const newUser = {
                    discordId: interaction.user.id,
                    discordName: interaction.user.username,
                    robloxName: username,
                    verifiedAt: new Date().toISOString(),
                };

                whitelist.push(newUser);
                await saveWhitelist(whitelist);

                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• member
                const member = await interaction.guild.members.fetch(interaction.user.id);
                const botMember = await interaction.guild.members.fetch(client.user.id);

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions
                const permissions = checkBotPermissions(interaction.guild, botMember);

                let roleSuccess = false;
                let nicknameSuccess = false;

                // ‡πÉ‡∏´‡πâ role
                if (permissions.manageRoles) {
                    try {
                        await member.roles.add(VERIFY_ROLE_ID);
                        console.log(`‚úÖ ‡πÉ‡∏´‡πâ role ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${interaction.user.username}`);
                        roleSuccess = true;
                    } catch (roleError) {
                        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ role:', roleError);
                    }
                } else {
                    console.log('‚ö† Bot ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Roles');
                }

                // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions ‡πÅ‡∏•‡∏∞ role hierarchy)
                if (permissions.manageNicknames) {
                    try {
                        const newName = `${interaction.user.username} (@${username})`;

                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠
                        if (newName.length <= 32) {
                            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role hierarchy - bot ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ role ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                            const botHighestRole = botMember.roles.highest;
                            const userHighestRole = member.roles.highest;

                            if (botHighestRole.position > userHighestRole.position) {
                                await member.setNickname(newName);
                                console.log(`‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${newName}`);
                                nicknameSuccess = true;
                            } else {
                                console.log('‚ö† Bot role ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ user role ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ');
                            }
                        } else {
                            console.log(`‚ö† ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: ${newName.length}`);
                        }
                    } catch (nicknameError) {
                        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠:', nicknameError);
                    }
                } else {
                    console.log('‚ö† Bot ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Nicknames');
                }

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                let responseMessage = `‚úÖ **‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!** \n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüë§ **Discord:** ${interaction.user.username}\nüéÆ **Roblox:** ${username}\n‚è∞ **‡πÄ‡∏ß‡∏•‡∏≤:** <t:${Math.floor(Date.now() / 1000)}:F>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                const statusItems = [];
                statusItems.push(roleSuccess ? '‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Role ‡πÅ‡∏•‡πâ‡∏ß' : '‚ö† ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ Role ‡πÑ‡∏î‡πâ');
                statusItems.push(nicknameSuccess ? '‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‚ö† ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ');

                responseMessage += `\n\nüìã **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:**\n${statusItems.join('\n')}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüéâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!`;

                await interaction.reply({
                    content: responseMessage,
                    flags: 64 // InteractionResponseFlags.Ephemeral
                });

                console.log(`‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${interaction.user.username} -> ${username} (Role: ${roleSuccess}, Nickname: ${nicknameSuccess})`);

            } else {
                console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: Username=${username}, Secret=${secret}`);

                await interaction.reply({
                    content: "‚ùå **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n‚Ä¢ Username Roblox ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‚Ä¢ Verify Code ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‚Ä¢ ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà-‡πÄ‡∏•‡πá‡∏Å\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìû ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                    flags: 64 // InteractionResponseFlags.Ephemeral
                });
            }

        } catch (err) {
            console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:", err);
            await interaction.reply({
                content: "‚ö† **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î**\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                flags: 64 // InteractionResponseFlags.Ephemeral
            });
        }
    }
});

// Error handling
client.on('error', error => {
    console.error('‚ùå Client Error:', error);
});

process.on('uncaughtException', error => {
    console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

client.login(process.env.DISCORD_TOKEN).catch(err => {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ:', err);
});